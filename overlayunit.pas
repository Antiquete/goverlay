unit overlayunit;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, process, Forms, Controls, Graphics, Dialogs, ExtCtrls,
  StdCtrls, Spin, ComCtrls, Buttons, aboutunit,ATStringProc_HtmlColor;



type

  { Tgoverlayform }

  Tgoverlayform = class(TForm)
    checkallBitBtn: TBitBtn;
    frametimegraphlabel: TLabel;
    timelabel: TLabel;
    ramlabel: TLabel;
    frametimelabel2: TLabel;
    vulkanlabel: TLabel;
    vulkanftimelabel: TLabel;
    ramusagelabel: TLabel;
    vulkanfpslabel: TLabel;
    rrggbbLabel: TLabel;
    saveBitBtn: TBitBtn;
    fontsizeSpinEdit: TSpinEdit;
    vkcubeBitBtn: TBitBtn;
    aboutBitBtn: TBitBtn;
    ColorDialog1: TColorDialog;
    crosshairShape: TShape;
    fontsizeComboBox: TComboBox;
    fpslimComboBox: TComboBox;
    GroupBox4: TGroupBox;
    cpuCheckGroup: TCheckGroup;
    gpuCheckGroup: TCheckGroup;
    hidehudCheckBox: TCheckBox;
    hudonoffComboBox: TComboBox;
    Label10: TLabel;
    Label11: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    previewLabel: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    loggingComboBox: TComboBox;
    memCheckGroup: TCheckGroup;
    otherCheckGroup: TCheckGroup;
    paintShape: TShape;
    paintSpeedButton: TSpeedButton;
    toprightShape: TShape;
    topleftShape: TShape;
    bottomrightShape: TShape;
    bottomleftShape: TShape;
    transpTrackBar: TTrackBar;
    crosshairTrackBar: TTrackBar;
    visualGroupBox: TGroupBox;
    visualGroupBox1: TGroupBox;
    vsyncComboBox: TComboBox;
    gpulabel: TLabel;
    vramlabel: TLabel;
    gputemplabel: TLabel;
    cpuusagelabel: TLabel;
    cputemplabel: TLabel;
    gpuusagelabel: TLabel;
    vramusagelabel: TLabel;
    GroupBox1: TGroupBox;
    GroupBox2: TGroupBox;
    backgroundImage: TImage;
    Label1: TLabel;
    Label2: TLabel;
    cpulabel: TLabel;
    Shape1: TShape;
    frametimelabel: TLabel;
    procedure checkallBitBtnClick(Sender: TObject);
    procedure cpuCheckGroupItemClick(Sender: TObject; Index: integer);
    procedure fontsizeComboBoxChange(Sender: TObject);
    procedure fontsizeComboBoxKeyPress(Sender: TObject; var Key: char);
    procedure fpslimComboBoxKeyPress(Sender: TObject; var Key: char);
    procedure gpuCheckGroupItemClick(Sender: TObject; Index: integer);
    procedure hudonoffComboBoxKeyPress(Sender: TObject; var Key: char);
    procedure loggingComboBoxKeyPress(Sender: TObject; var Key: char);
    procedure memCheckGroupItemClick(Sender: TObject; Index: integer);
    procedure otherCheckGroupItemClick(Sender: TObject; Index: integer);
    procedure saveBitBtnClick(Sender: TObject);
    procedure vkcubeBitBtnClick(Sender: TObject);
    procedure aboutBitBtnClick(Sender: TObject);
    procedure bottomleftShapeMouseEnter(Sender: TObject);
    procedure bottomrightShapeMouseEnter(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure paintSpeedButtonClick(Sender: TObject);
    procedure topleftShapeMouseEnter(Sender: TObject);
    procedure toprightShapeMouseEnter(Sender: TObject);
    procedure vsyncComboBoxKeyPress(Sender: TObject; var Key: char);

  private

  public

  end;

var
  goverlayform: Tgoverlayform;
  s: string;
  Color: string;
  fontsizeCustomValue:TextFile;
  fontsizeCustomScript:TextFile;
  crosshairsizeScript:TextFile;
  crosshairsizeValue:TextFile;
  crosshaircolorValue:TextFile;
  crosshaircolorScript:TextFile;



implementation

{$R *.lfm}


{ Tgoverlayform }

procedure Tgoverlayform.saveBitBtnClick(Sender: TObject);
begin
  //Create directories
  RunCommand('bash -c ''mkdir -p /home/$USER/.config/MangoHud/''', s);
  RunCommand('bash -c ''mkdir -p /tmp/goverlay/''', s);

  // Delete old file if it exists
  RunCommand('bash -c ''rm /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  // Create a new file for overlaygui
  RunCommand('bash -c ''echo "################### File Generated by GOverlay 0.2 (beta) ###################" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  // Popup a notification
  RunCommand('bash -c ''notify-send Config_saved''', s);


  //####################################################################################### PERFORMANCE


    //Setup FPS Limit
     case fpslimCombobox.ItemIndex of
    0:RunCommand('bash -c ''echo "fps_limit=15" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    1:RunCommand('bash -c ''echo "fps_limit=30" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    2:RunCommand('bash -c ''echo "fps_limit=45" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    3:RunCommand('bash -c ''echo "fps_limit=60" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    4:RunCommand('bash -c ''echo "fps_limit=90" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    5:RunCommand('bash -c ''echo "fps_limit=120" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    6:RunCommand('bash -c ''echo "fps_limit=144" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    7:RunCommand('bash -c ''echo "#fps_limit=" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
  end;

  //Setup vsync
  case vsyncCombobox.ItemIndex of
    0:RunCommand('bash -c ''echo "vsync=0" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    1:RunCommand('bash -c ''echo "vsync=1" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    2:RunCommand('bash -c ''echo "vsync=2" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    3:RunCommand('bash -c ''echo "vsync=3" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
  end;

  //####################################################################################### MANGOHUD

  //CPU checks
  if cpuCheckgroup.Checked[0] then
  RunCommand('bash -c ''echo "cpu_stats" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if cpuCheckgroup.Checked[1] then
  RunCommand('bash -c ''echo "cpu_temp" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if cpuCheckgroup.Checked[2] then
  RunCommand('bash -c ''echo "core_load" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);



  //GPU checks
  if gpuCheckgroup.Checked[0] then
  RunCommand('bash -c ''echo "gpu_stats" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if gpuCheckgroup.Checked[1] then
  RunCommand('bash -c ''echo "gpu_temp" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if gpuCheckgroup.Checked[2] then
  RunCommand('bash -c ''echo "gpu_core_clock" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);



  //GPU
  if gpuCheckgroup.Checked[0] then
  RunCommand('bash -c ''echo "gpu_stats" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);



  //Memory checks
  if memCheckgroup.Checked[0] then
  RunCommand('bash -c ''echo "ram" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if gpuCheckgroup.Checked[1] then
  RunCommand('bash -c ''echo "vram" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if gpuCheckgroup.Checked[2] then
  RunCommand('bash -c ''echo "io_read,io_write" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);


  //Others checks
  if otherCheckgroup.Checked[0] then
  RunCommand('bash -c ''echo "frame_timing" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if otherCheckgroup.Checked[1] then
  RunCommand('bash -c ''echo "time" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if otherCheckgroup.Checked[2] then
  RunCommand('bash -c ''echo "crosshair" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);




  //Crosshair Size

      // Assign value to file
      AssignFile(crosshairsizeValue, '/tmp/goverlay/crosshairsizeValue');
      Rewrite(crosshairsizeValue);
      Writeln(crosshairsizeValue,crosshairTrackbar.Position);
      CloseFile(crosshairsizeValue);

      // Create custom script
      AssignFile(crosshairsizeScript, '/tmp/goverlay/crosshairsizeScript.sh');
      Rewrite(crosshairsizeScript);
      Writeln(crosshairsizeScript,'CROSSHAIRs=$(cat /tmp/goverlay/crosshairsizeValue)');  //Store crosshair size in Linux/Unix variable
      Writeln(crosshairsizeScript,'echo "crosshair_size=$CROSSHAIRs" >> /home/$USER/.config/MangoHud/MangoHud.conf'); //Create correct command with crosshair value
      CloseFile(crosshairsizeScript);

      //execute custom script to store custom value on mangohud.conf
      RunCommand('bash -c ''sh /tmp/goverlay/crosshairsizeScript.sh''', s);


  //Crosshair Color
      //Convert TCOLOR to RGB format
     // Color := SColorToHtmlColor(paintShape.Brush.Color);
     // rrggbbLabel.Caption := Color;



      // Assign value to file
      AssignFile(crosshaircolorValue, '/tmp/goverlay/crosshaircolorValue');
      Rewrite(crosshaircolorValue);
      Writeln(crosshaircolorValue,rrggbbLabel.Caption);
      CloseFile(crosshaircolorValue);

      // Create custom script
      AssignFile(crosshaircolorScript, '/tmp/goverlay/crosshaircolorScript.sh');
      Rewrite(crosshaircolorScript);
      Writeln(crosshaircolorScript,'CROSSHAIRc=$(cat /tmp/goverlay/crosshaircolorValue | cut -c 2-10)');  //Store crosshair color in Linux/Unix variable and remove # character
      Writeln(crosshaircolorScript,'echo "crosshair_color=$CROSSHAIRc" >> /home/$USER/.config/MangoHud/MangoHud.conf'); //Create correct command with crosshair color value
      CloseFile(crosshaircolorScript);

      //execute custom script to store custom value on mangohud.conf
      RunCommand('bash -c ''sh /tmp/goverlay/crosshaircolorScript.sh''', s);

  //####################################################################################### VISUALS


  //Setup Default HUD Visualization
  if hidehudcheckbox.Checked=false then
  RunCommand('bash -c ''echo "no_display" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  //Background transparency
   case transptrackbar.Position of
    0:RunCommand('bash -c ''echo "background_alpha=1" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    1:RunCommand('bash -c ''echo "background_alpha=0.9" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    2:RunCommand('bash -c ''echo "background_alpha=0.8" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    3:RunCommand('bash -c ''echo "background_alpha=0.7" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    4:RunCommand('bash -c ''echo "background_alpha=0.6" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    5:RunCommand('bash -c ''echo "background_alpha=0.5" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    6:RunCommand('bash -c ''echo "background_alpha=0.4" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    7:RunCommand('bash -c ''echo "background_alpha=0.3" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    8:RunCommand('bash -c ''echo "background_alpha=0.2" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    9:RunCommand('bash -c ''echo "background_alpha=0.1" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    10:RunCommand('bash -c ''echo "background_alpha=0" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
  end;

  //Font Size
  case fontsizeCombobox.ItemIndex of
    0:RunCommand('bash -c ''echo "font_size=19" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    1:RunCommand('bash -c ''echo "font_size=24" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    2:RunCommand('bash -c ''echo "font_size=40" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    3:begin
      // Assign custom value to file
      AssignFile(fontsizeCustomValue, '/tmp/goverlay/fontsizeCustom');
      Rewrite(fontsizeCustomValue);
      Writeln(fontsizeCustomValue,fontsizeSpinedit.Value);
      CloseFile(fontsizeCustomValue);

      // Create custom script
      AssignFile(fontsizeCustomScript, '/tmp/goverlay/fontsizeCustomScript.sh');
      Rewrite(fontsizeCustomScript);
      Writeln(fontsizeCustomScript,'FONTSIZEc=$(cat /tmp/goverlay/fontsizeCustom)');  //Store font size in a Linux/Unix variable
      Writeln(fontsizeCustomScript,'echo "font_size=$FONTSIZEc" >> /home/$USER/.config/MangoHud/MangoHud.conf'); //Create correct command with custom value
      CloseFile(fontsizeCustomScript);

      //execute custom script to store custom value on mangohud.conf
      RunCommand('bash -c ''sh /tmp/goverlay/fontsizeCustomScript.sh''', s);

      end;
  end;


  //HUD Position
  if toprightShape.Brush.Style=bsSolid then
  RunCommand('bash -c ''echo "position=top-right" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if topleftShape.Brush.Style=bsSolid then
  RunCommand('bash -c ''echo "position=top-left" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if bottomrightShape.Brush.Style=bsSolid then
  RunCommand('bash -c ''echo "position=bottom-right" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);

  if bottomleftShape.Brush.Style=bsSolid then
  RunCommand('bash -c ''echo "position=bottom-left" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);


  //####################################################################################### KEYBINDINGS


    //HUD ON / OFF
  case hudonoffCombobox.ItemIndex of
    0:RunCommand('bash -c ''echo "toggle_hud=F10" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    1:RunCommand('bash -c ''echo "toggle_hud=F11" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    2:RunCommand('bash -c ''echo "toggle_hud=F12" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
  end;

     //LOGGING
  case loggingCombobox.ItemIndex of
    0:RunCommand('bash -c ''echo "toggle_logging=F1" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    1:RunCommand('bash -c ''echo "toggle_logging=F2" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
    2:RunCommand('bash -c ''echo "toggle_logging=F3" >> /home/$USER/.config/MangoHud/MangoHud.conf''', s);
  end;

end;

procedure Tgoverlayform.fontsizeComboBoxChange(Sender: TObject);
begin
  if fontsizeCombobox.ItemIndex=3 then
  fontsizeSpinEdit.Enabled:=true
  else
    fontsizeSpinEdit.Enabled:=false;
end;

procedure Tgoverlayform.fontsizeComboBoxKeyPress(Sender: TObject; var Key: char
  );
begin
  //Block keypress on combobox
  key:=#0;
end;

procedure Tgoverlayform.fpslimComboBoxKeyPress(Sender: TObject; var Key: char);
begin
  //Block keypress on combobox
  key:=#0;
end;

procedure Tgoverlayform.gpuCheckGroupItemClick(Sender: TObject; Index: integer);
begin
    //Preview GPU Average Load
  if gpuCheckgroup.Checked[0] then
  begin
  gpulabel.Caption:='GPU';
  gpuusagelabel.Caption:='90%'
  end
  else
  begin
  gpulabel.Caption:='';
  gpuusagelabel.Caption:='';
  end;

  //Preview GPU temperature
  if gpuCheckgroup.Checked[1] then
  begin
  gpulabel.Caption:='GPU';
  gputemplabel.Caption:='82ºC';
  end
  else
  begin
  gputemplabel.Caption:='';
  end;
end;

procedure Tgoverlayform.hudonoffComboBoxKeyPress(Sender: TObject; var Key: char
  );
begin
    //Block keypress on combobox
  key:=#0;
end;

procedure Tgoverlayform.loggingComboBoxKeyPress(Sender: TObject; var Key: char);
begin
    //Block keypress on combobox
  key:=#0;
end;

procedure Tgoverlayform.memCheckGroupItemClick(Sender: TObject; Index: integer);
begin
    //Preview VRAM usage
  if memCheckgroup.Checked[0] then
    begin
    vramlabel.Caption:='VRAM';
    vramusagelabel.Caption:='2.56GB'
    end
  else
    begin
    vramlabel.Caption:='';
    vramusagelabel.Caption:=''
  end;

   //Preview RAM usage
   if memCheckgroup.Checked[1] then
     begin
     ramlabel.Caption:='RAM';
     ramusagelabel.Caption:='5.99GB'
     end
   else
     begin
     ramlabel.Caption:='';
     ramusagelabel.Caption:=''
   end;

end;

procedure Tgoverlayform.otherCheckGroupItemClick(Sender: TObject; Index: integer
  );
begin
   //Preview frame time graph
     if otherCheckgroup.Checked[0] then
     begin
     frametimelabel.Caption:='Frametime';
     frametimelabel2.Caption:='16.6ms';
     frametimegraphlabel.Caption:='-------------------------'
     end
   else
     begin
     frametimelabel.Caption:='';
     frametimelabel2.Caption:='';
     frametimegraphlabel.Caption:=''
   end;

  //Preview TIME
   if otherCheckgroup.Checked[1] then
      timelabel.Caption:='22:40'
   else
    timelabel.Caption:='';

end;

procedure Tgoverlayform.checkallBitBtnClick(Sender: TObject);
begin
  //Check all hud options
  cpuCheckgroup.Checked[0]:=true;
  cpuCheckgroup.Checked[1]:=true;
  cpuCheckgroup.Checked[2]:=true;
  gpuCheckgroup.Checked[0]:=true;
  gpuCheckgroup.Checked[1]:=true;
  gpuCheckgroup.Checked[2]:=true;
  memCheckgroup.Checked[0]:=true;
  memCheckgroup.Checked[1]:=true;
  memCheckgroup.Checked[2]:=true;
  otherCheckgroup.Checked[0]:=true;
  otherCheckgroup.Checked[1]:=true;
end;

procedure Tgoverlayform.cpuCheckGroupItemClick(Sender: TObject; Index: integer);
begin
  //Preview CPU Average Load
  if cpuCheckgroup.Checked[0] then
  begin
  cpulabel.Caption:='CPU';
  cpuusagelabel.Caption:='28%'
  end
  else
  begin
  cpulabel.Caption:='';
  cpuusagelabel.Caption:='';
  end;

  //Preview CPU temperature
  if cpuCheckgroup.Checked[1] then
  begin
  cpulabel.Caption:='CPU';
  cputemplabel.Caption:='44ºC';
  end
  else
  begin
  cputemplabel.Caption:='';
  end;

end;

procedure Tgoverlayform.vkcubeBitBtnClick(Sender: TObject);
begin
  RunCommand('bash -c ''MANGOHUD=1 vkcube''', s);
end;

procedure Tgoverlayform.aboutBitBtnClick(Sender: TObject);
begin
  aboutForm.show;
end;

procedure Tgoverlayform.bottomleftShapeMouseEnter(Sender: TObject);
begin
  //Highlight main button
  bottomleftShape.Brush.Style:=bsSolid;

  //Clear other buttons
  bottomrightShape.Brush.Style:=bsClear;
  toprightShape.Brush.Style:=bsClear;
  topleftShape.Brush.Style:=bsClear;
end;

procedure Tgoverlayform.bottomrightShapeMouseEnter(Sender: TObject);
begin
  //Highlight main button
  bottomrightShape.Brush.Style:=bsSolid;

  //Clear other buttons
  bottomleftShape.Brush.Style:=bsClear;
  toprightShape.Brush.Style:=bsClear;
  topleftShape.Brush.Style:=bsClear;
end;

procedure Tgoverlayform.FormCreate(Sender: TObject);
begin
  //Centralize window
  Left:=(Screen.Width-Width)  div 2;
  Top:=(Screen.Height-Height) div 2;
end;

procedure Tgoverlayform.paintSpeedButtonClick(Sender: TObject);
begin
    if colordialog1.Execute then
    // Change color of Tshape
    paintShape.Brush.Color:=(colordialog1.Color);

    //Use function SColorToHtmlColor from unit ATStringProc_htmlColor to change color format to RGB and write value to label
    rrggbbLabel.Caption := SColorToHtmlColor(colordialog1.Color);
end;

procedure Tgoverlayform.topleftShapeMouseEnter(Sender: TObject);
begin
  //Highlight main button
  topleftShape.Brush.Style:=bsSolid;

  //Clear other buttons
  bottomleftShape.Brush.Style:=bsClear;
  bottomrightShape.Brush.Style:=bsClear;
  toprightShape.Brush.Style:=bsClear;
end;

procedure Tgoverlayform.toprightShapeMouseEnter(Sender: TObject);
begin
  //Highlight main button
  toprightShape.Brush.Style:=bsSolid;

  //Clear other buttons
  bottomleftShape.Brush.Style:=bsClear;
  bottomrightShape.Brush.Style:=bsClear;
  topleftShape.Brush.Style:=bsClear;
end;

procedure Tgoverlayform.vsyncComboBoxKeyPress(Sender: TObject; var Key: char);
begin
   //Block keypress on combobox
  key:=#0;
end;





end.

